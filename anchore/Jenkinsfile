pipeline {
    agent any

    environment {
        REGISTRY = 'sola.local:18082'
        IMAGENAME = 'webgoat'
        DEV_REPO = 'staging-dev'
        TAG_FILE = './tag_file.json'
        ARTEFACT_NAME = "./target/WebGoat-${BUILD_VERSION}.war"
    }

    stages {

        stage('Build') {
            steps {
                sh 'mvn -B -Dproject.version=$BUILD_VERSION -Dmaven.test.failure.ignore clean package'
            }
            post {
                success {
                    echo 'Now archiving...'
                    archiveArtifacts artifacts: "**/target/*.war"
                }
            }
        }

        stage('Nexus IQ Scan'){
            steps {
                script{
                    def policyEvaluation = nexusPolicyEvaluation failBuildOnNetworkError: true, iqApplication: selectedApplication('webgoat-legacy'), iqScanPatterns: [[scanPattern: '**/*.war']], iqStage: 'build', jobCredentialsId: 'wguser'
                }
            }
        }

        stage('Create Dockerfile'){
            steps {
                script {
                    writeFile file: 'Dockerfile', text: 
                        '''FROM tomcat:8.0.43-jre8
                        ADD /Users/sotudeko/.jenkins/workspace/Anchore/WebGoat-anchore-scan/target/WebGoat-1.2.war /usr/local/tomcat/webapps/
                        EXPOSE 8080
                        CMD chmod +x /usr/local/tomcat/bin/catalina.sh
                        CMD ["catalina.sh", "run"]'''
                }
            }
        }

        stage('Build docker image'){
            steps {
                script {
                    /* def customImage = docker.build("webgoat:${env.BUILD_ID}") */
     

                    docker.withRegistry('https://sola.local:18082', 'docker-rgy-id') {

                        def customImage = docker.build("webgoat")

                        /* Push the container to the custom Registry */
                        customImage.push("${BUILD_VERSION}")

                        /* customImage.push("${env.BUILD_NUMBER}") */
                        customImage.push("latest")
                    }

                }
            }
        }

        stage('Scan docker image'){
            steps {
                script {
                    sh 'echo "$REGISTRY/$IMAGENAME:${BUILD_VERSION} ${WORKSPACE}/Dockerfile" > anchore_images'
                    anchore 'anchore_images'
                }
            }
        }
    }
}

